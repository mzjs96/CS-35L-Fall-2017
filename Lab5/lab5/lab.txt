CS35L - LAB 5lab.txtMichael Zhou804663317Write tr2b.c:Check for correct count and conditions. Loop through characters in stdin using getchar().Process and output the appropriate char to stdout with putchar.If the character in 'from' string, return the corresponding the character in 'to' string as well. Otherwise, return a character itself.Write tr2u.c:Same structure, but changing the input/output into read and write instead of stdin and stdout.Compile the two programs wrote:gcc -g -o tr2b tr2b.cgcc -g -o tr2u tr2u.cMake a 5000000 byte file that contains 5000000 a's.#include <iostream>using namespace std;int main(){  for (int i = 0; i < 5000000; i++)  cout << 'a';}g++ -o out output.cpp./output > input.txtUse strance command to compare sys calls:1) Copying one file to another:Use the command:strace -c ./tr2b 'a' 'x' <input.txt> output_tr2btr2b gives 1250 system calls in total.Get the output:% time     seconds  usecs/call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 54.08    0.000517           1       611           write 32.53    0.000311           1       613           read  4.60    0.000044           5         9           mmap  2.72    0.000026           7         4           mprotect  1.88    0.000018           5         4           fstat  1.46    0.000014           7         2           open  0.94    0.000009           9         1           munmap  0.73    0.000007           7         1         1 access  0.63    0.000006           3         2           close  0.42    0.000004           4         1           arch_prctl  0.00    0.000000           0         1           brk  0.00    0.000000           0         1           execve------ ----------- ----------- --------- --------- ----------------100.00    0.000956                  1250         1 totalUse the command:strace -c ./tr2u 'a' 'x' <input.txt> output_tr2utr2u gives 10000024 system calls in total.% time     seconds  usecs/call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 55.14   21.578920           4   5000000           write 44.86   17.557532           4   5000002           read  0.00    0.000037           5         7           mmap  0.00    0.000026           7         4           mprotect  0.00    0.000013           7         2           open  0.00    0.000010          10         1           execve  0.00    0.000009           9         1           munmap  0.00    0.000007           4         2           close  0.00    0.000007           4         2           fstat  0.00    0.000007           7         1         1 access  0.00    0.000003           3         1           brk  0.00    0.000003           3         1           arch_prctl------ ----------- ----------- --------- --------- ----------------100.00   39.136574              10000024         1 totalIf the program uses getchar and putchar, the input characters are kept in thebuffer, so the program does not have to make a system call for every single byte. That's the reason why read/write is much slower than getcahr/putchar.1) copy one file to the terminalstrace -c ./tr2b 'a' 'x' < input.txttr2b gives 5522 syscalls in total.x% time     seconds  usecs/call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 91.72    0.015302           3      4883           write  7.37    0.001230           2       613           read  0.28    0.000046           5         9           mmap  0.17    0.000028           7         4           mprotect  0.14    0.000023          12         2           open  0.10    0.000016           4         4           fstat  0.06    0.000010          10         1           munmap  0.05    0.000008           8         1         1 access  0.04    0.000006           3         2           close  0.04    0.000006           6         1           execve  0.02    0.000004           4         1           brk  0.02    0.000004           4         1           arch_prctl------ ----------- ----------- --------- --------- ----------------100.00    0.016683                  5522         1 totalstrace -c ./tr2u 'a' 'x' < input.txttr2u gives 10000024 syscalls in total.% time     seconds  usecs/call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 55.92   22.901285           5   5000000           write 44.08   18.049144           4   5000002           read  0.00    0.000036           5         7           mmap  0.00    0.000027           7         4           mprotect  0.00    0.000014           7         2           open  0.00    0.000009           9         1           munmap  0.00    0.000007           4         2           fstat  0.00    0.000007           7         1         1 access  0.00    0.000006           3         2           close  0.00    0.000006           6         1           execve  0.00    0.000004           4         1           brk  0.00    0.000003           3         1           arch_prctl------ ----------- ----------- --------- --------- ----------------100.00   40.950548              10000024         1 totalIn comparison, the buffered version is much faster than unbuffered version.tr2u uses significantly much more syscalls than tr2c.Testing time performance:tr2b:time ./tr2b 'abc' 'xyz' < input.txt > output_tr2breal    0m0.178suser    0m0.105ssys     0m0.005str2u:time ./tr2u 'abc' 'xyz' < input.txt > output_tr2u real    0m5.667suser    0m0.236ssys     0m5.364sIn comparison, we see that tr2b uses much less amout of time due to significantly less amout of syscalls in the process.