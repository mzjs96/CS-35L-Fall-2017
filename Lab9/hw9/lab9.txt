Michael(Jiashu) Zhou 
UID: 804 663 317 
Lab 9 Log

1.
First obtain a copy of the Diffutils repository:
	git clone https://git.savannah.gnu.org/git/diffutils.git

2.
Obtain a log of changes of Diffutils by running the command:
	git log > git-log.txt

3.
Generate a list of tags used for Diffutils using the “git tag” command:
	git tag > git-tag.txt

4.
Find the commit entitled "maint: quote"
emacs git-log.txt
	C-s maint: quote 

As shown on the log file: the commit id is 
62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Then use the commit id to create a patch:
	git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

5.
Check the version 3.0 in the repo:
	git checkout v3.0

Note: checking out 'v3.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 022cd5c... version 3.0

6.
Use the patch command to apply quote-patch.txt to version 3.0
	patch -p1 < quote-patch.txt

We've seen a lot of fails after running the patch command:

can't find file to patch at input line 

Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej
patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej
patching file TODO
patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej
patching file doc/diagmeet.note
can't find file to patch at input line 222

7.
Command: git status 
to get an overview of what have happened.
# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   NEWS
#	modified:   README
#	modified:   TODO
#	modified:   doc/diagmeet.note
#	modified:   ms/config.bat
#	modified:   ms/config.site
#	modified:   po/en.po
#	modified:   src/analyze.c
#	modified:   src/cmp.c
#	modified:   src/context.c
#	modified:   src/diff.c
#	modified:   src/diff.h
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/ifdef.c
#	modified:   src/io.c
#	modified:   src/sdiff.c
#	modified:   src/side.c
#	modified:   src/system.h
#	modified:   src/util.c
#	modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	NEWS.orig
#	README-hacking.orig
#	README-hacking.rej
#	README.orig
#	README.rej
#	cfg.mk.orig
#	cfg.mk.rej
#	git-log.txt
#	git-tag.txt
#	ms/config.site.orig
#	quote-patch.txt
#	src/cmp.c.orig
#	src/context.c.orig
#	src/diff.c.orig
#	src/diff.c.rej
#	src/diff.h.orig
#	src/diff3.c.orig
#	src/diff3.c.rej
#	src/dir.c.orig
#	src/sdiff.c.orig
#	src/system.h.orig
#	src/util.c.orig
#	tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")


8.
Learn how to use the Emacs functions vc-diff (C-x v =) and vc-revert (C-x v u) and diff-apply-hunk by looking at the links provided in the spec.

9.
Go through all the files that are not c files under the modified status list.
Open with emacs, and enter the command:
	C-x v =
To see the patch hunks applied
For non .c files, all hunks were to be reverted, so we used
	C-x v u
To revert all hunks

For the .c files, open up the patch to look through each of the hunks to see if there are comments or the actual code.
For the hunks patching just comments, use command:
	C-u C-x C-a
To revert the hunks and undo them.

Some .c files needed all patches to be reverted because they were all comments
Therefore use command:
C-x v u
to revert all patches

Use emacs to open NEWS, README, TODO, doc/diagmeet.note, ms/config.bat,
ms/config.site, po/en.po, src/diff.h, src/system.h, tests/help-version

For .c files, discard changes to comments.
I used vc-diff (C-x v =) function to check changes.

Lines specified for .c files:
(line number in bracket means the diff is not a comment so ignore and change 
by hand)

src/analyze.c: all (reverted)
src/cmp.c: 36, (115, 134, 185, 231, 257, 269), 364, 377 
src/context.c: 159, 289, 393, 431, 459
src/diff.c: 40, 57, 92
src/diff3.c: 35, 159, 1475
src/dir.c: 84, 125, (154), 234
src/ifdef.c: 132
src/io.c: 57
src/sdiff.c: 35, 92, (175, 230, 286, 572), 747
src/side.c: 292, 302, 310 (all comments)
src/util.c: 121, 146, 190, 241, 270, 650


10. Manually Apply Changes of rejected patches

The merge failed because line numbers and strings didn't match.
The files are for src/diff.c.rej and src/diff3.c.rej
These were because the patch file original lines did not match up to the actual
file either in line number.

11.
To remove all untracked files, we use the command:
	git clean -f                                                      

12.
$ git status
# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   src/cmp.c
#	modified:   src/diff.c
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/sdiff.c
#	modified:   src/util.c
#
no changes added to commit (use "git add" and/or "git commit -a")

Now it shows 6 modified files on the git status list

To generate a patch:
	git diff > quote-3.0-patch.txt

$ wc -l quote-3.0-patch.txt 
	335 quote-3.0-patch.txt

The number of lines in the file is 335.

13.
Build the resulting modified version:
	./bootstrap

Now switch to lnxsrv02 because the server does not require additional patch 
for GNU C 2.16

Run:
	./configure
	make
	make check

Then run 
	./src/diff . -

	./src/diff --help

To verify that both yield the correct quotation mark.

14.
Sanity test:
First copy the src file of the patched version into one directory
	cp -r src ../diffutils-3.0-patch

Then obtain the original source code using git clone
	git clone git://git.savannah.gnu.org/diffutils.git diffutils-3.0-orig

	git checkout v3.0
Then copy the src files to another directory
	cp -r src ../diffutils-3.0

Now use the new patched diff executable to compare the src code:
	./diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch > 
	quote-3.0-test.txt

15.
Run the command to find the difference between the diff files:
	diff quote-3.0-test.txt diffutils/quote-3.0-patch.txt

There are some trivial difference output. The files are not identical. However,
all the differences are related to the difference in quotation marks ' or `, or
the differenc of the path name. Therefore we can conclude that the differences
are innocuous.
